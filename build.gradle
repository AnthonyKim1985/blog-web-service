buildscript {
    ext {
        grpcVersion = '1.34.1'
        protoBufVersion = '3.14.0'
        springBootVersion = '2.4.4'
        grpcSpringBootVersion = '2.10.1.RELEASE'
        gradleDockerVersion = '0.22.2'
        gradleProtoBufVersion = '0.8.11'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradleDockerVersion}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:${gradleProtoBufVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'com.google.protobuf'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

sourceCompatibility = JavaVersion.VERSION_15
targetCompatibility = JavaVersion.VERSION_15

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

bootJar {
    baseName = 'adag-web-service'
    version = '1.0.0'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'

    /*
     * GRPC dependencies
     */
    implementation("net.devh:grpc-spring-boot-starter:${grpcSpringBootVersion}")
    implementation("net.devh:grpc-server-spring-boot-starter:${grpcSpringBootVersion}")
    implementation("net.devh:grpc-client-spring-boot-starter:${grpcSpringBootVersion}")
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if ("io.grpc".equalsIgnoreCase(details.requested.group)) {
            details.useVersion grpcVersion
        }
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/protoGen'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protoBufVersion}"
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        ofSourceSet('main').each { task ->
            task.builtins {
                java {
                    outputSubDir = 'protoGen'
                }
            }
            task.plugins {
                grpc {
                    outputSubDir = 'protoGen'
                }
            }
        }
    }

    generatedFilesBaseDir = "$projectDir/src/"
}

//noinspection GroovyAssignabilityCheck
task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    copySpec.from("script/entrypoint.sh").into("dependency")
    //noinspection GroovyAssignabilityCheck
    name "${bootJar.baseName}:${bootJar.version}"
    //noinspection GroovyAssignabilityCheck
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

//noinspection GroovyAssignabilityCheck
task printVersion {
    doLast {
        print bootJar.version
    }
}

//noinspection GroovyAssignabilityCheck
task printBaseName {
    doLast {
        print bootJar.baseName
    }
}

test {
    useJUnitPlatform {
        systemProperty "test.profile", "unit"
    }
    testLogging {
        showStandardStreams = true
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        systemProperty "test.profile", "integration"
        systemProperty "spring.profiles.active", System.properties['spring.test.profiles.active']
    }
    testLogging {
        showStandardStreams = true
    }
}
